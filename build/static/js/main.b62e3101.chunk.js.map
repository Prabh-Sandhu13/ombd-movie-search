{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","searchTerm","Results","Nominations","editSearch","e","searchMovie","target","value","setState","title","fetch","then","res","json","data","Response","newMovie","Title","Year","movies","includes","push","catch","console","log","addNomin","movie","movieNomins","deleteNomin","nomination","filter","item","style","textAlign","paddingTop","type","this","onChange","placeholder","map","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAiFeA,E,4MA7EbC,MAAQ,CACNC,WAAY,GACZC,QAAQ,GACRC,YAAY,I,EAGdC,WAAa,SAACC,GACZ,EAAKC,YAAYD,EAAEE,OAAOC,OAC1B,EAAKC,SAAS,CAACR,WAAYI,EAAEE,OAAOC,S,EAGtCF,YAAc,SAACI,GACA,IAATA,GACF,EAAKD,SAAS,CAAEP,QAAS,KACzB,EAAKO,SAAS,CAAEN,YAAa,MAG3BQ,MADY,6CAA6CD,GAEpDE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,GAAmB,QAAhBA,EAAKC,SAAmB,CAC3B,IAAIC,EAAQ,UAAMF,EAAKG,MAAX,YAAoBH,EAAKI,KAAzB,KACRC,EAAS,EAAKpB,MAAME,QACpBkB,EAAOC,SAASJ,IAClBG,EAAOE,KAAKL,GAEd,EAAKR,SAAS,CAAEP,QAASkB,QAG1BG,MAAMC,QAAQC,M,EAIzBC,SAAW,SAACC,GACV,IAAIC,EAAc,EAAK5B,MAAMG,YACzByB,EAAYP,SAASM,IACvBC,EAAYN,KAAKK,GAEnB,EAAKlB,SAAS,CAAEN,YAAayB,K,EAG/BC,YAAc,SAACC,GACb,IAAIF,EAAc,EAAK5B,MAAMG,YAC1ByB,EAAYP,SAASS,KACtBF,EAAcA,EAAYG,QAAO,SAASC,GACxC,OAAOA,IAASF,MAGpB,EAAKrB,SAAS,CAAEN,YAAayB,K,uDAKpB,IAAD,OACN,OACE,sBAAKK,MAAS,CAACC,UAAW,SAAUC,WAAY,QAAhD,UACE,gDACA,uBAAOC,KAAM,OAAO5B,MAAS6B,KAAKrC,MAAMC,WAAYqC,SAAYD,KAAKjC,WAAYmC,YAAc,wBAC/F,uBACA,0CAEEF,KAAKrC,MAAME,QAAQsC,KAAI,SAAAb,GACrB,OAAQ,gCAAMA,EAAM,wBAAQc,QAAS,kBAAM,EAAKf,SAASC,IAArC,6BAGxB,8CAEEU,KAAKrC,MAAMG,YAAYqC,KAAI,SAAAV,GACzB,OAAQ,gCAAMA,EAAW,wBAAQW,QAAS,kBAAM,EAAKZ,YAAYC,IAAxC,iC,GAtErBY,IAAMC,WCUTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b62e3101.chunk.js","sourcesContent":["import React from 'react';\n\nclass App extends React.Component {\n\n  state = {\n    searchTerm: '',\n    Results:[],\n    Nominations:[]\n  }\n\n  editSearch = (e) => {\n    this.searchMovie(e.target.value)\n    this.setState({searchTerm: e.target.value})\n  }\n\n  searchMovie = (title) => {\n    if (title == \"\"){\n      this.setState({ Results: [] })\n      this.setState({ Nominations: [] })\n    } else {\n        const url = \"http://www.omdbapi.com/?apikey=51fc5dae&t=\"+title;\n        fetch(url)\n            .then(res => res.json())\n            .then((data) => {\n              if(data.Response ==\"True\") {\n              let newMovie = `${data.Title}(${data.Year})`\n              let movies = this.state.Results\n              if(!movies.includes(newMovie)) {\n                movies.push(newMovie)\n              }\n              this.setState({ Results: movies })\n              }\n            })\n            .catch(console.log)\n      }\n  }\n\n  addNomin = (movie) => {\n    let movieNomins = this.state.Nominations\n    if(!movieNomins.includes(movie)) {\n      movieNomins.push(movie)\n    }\n    this.setState({ Nominations: movieNomins })\n  }\n\n  deleteNomin = (nomination) => {\n    let movieNomins = this.state.Nominations\n    if(movieNomins.includes(nomination)) {\n      movieNomins = movieNomins.filter(function(item) {\n        return item !== nomination\n})\n    }\n    this.setState({ Nominations: movieNomins })\n\n  }\n\n\n    render(){\n      return (\n        <div style = {{textAlign: 'center', paddingTop: '30vh'}}>\n          <h2> Search movie </h2>\n          <input type= 'text' value = {this.state.searchTerm} onChange = {this.editSearch} placeholder = 'Search for a movie!'/>\n          <br></br>\n          <h3>Results:</h3>\n          {\n            this.state.Results.map(movie => {\n              return (<div>{movie}<button onClick={() => this.addNomin(movie)}>Nominate!</button></div>);\n            })\n          }\n          <h3>Nominations:</h3>\n          {\n            this.state.Nominations.map(nomination => {\n              return (<div>{nomination}<button onClick={() => this.deleteNomin(nomination)}>Remove</button></div>);\n            })\n          }\n\n        </div>\n      );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}